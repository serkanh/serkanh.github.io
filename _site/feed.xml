<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>serkan haytac</title>
		<description>Stylish Jekyll Theme</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Server-Side Encryption with Customer-Provided Encryption Keys </title>
				<description>&lt;p&gt;Per AWS docs requirements for encryptions are:
https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html&lt;/p&gt;

&lt;h5 id=&quot;generate-your-aes256-keys&quot;&gt;1. Generate your AES256 keys.&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ cat testing
this is a test
➜ echo -n your-super-secret-phrase-string | openssl dgst -sha256 -binary &amp;gt; aes256.key    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;encrypt-and-upload-your-file&quot;&gt;3. Encrypt and upload your file&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ aws --profile=personal \
s3api put-object \
--bucket=shaytac-test \
--key=test2 \
--body=testing \
--sse-customer-algorithm=AES256 \
--sse-customer-key=fileb://aes256.key
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;decrypt-and-download-your-file&quot;&gt;4. Decrypt and download your file&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ aws --profile=personal \
s3api get-object \
--bucket=shaytac-test \
--key=test2  \
--sse-customer-algorithm=AES256 \
--sse-customer-key=fileb://aes256.key testing-downloaded
➜ cat testing-downloaded
this is a test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
				<pubDate>Fri, 05 Jan 2018 17:13:00 -0500</pubDate>
				<link>/s3,/encryption/2018/01/05/S3-server-side-encryption-with-customer-provided-enc-keys.html</link>
				<guid isPermaLink="true">/s3,/encryption/2018/01/05/S3-server-side-encryption-with-customer-provided-enc-keys.html</guid>
			</item>
		
			<item>
				<title>Encrypting files with rsa key pairs.</title>
				<description>&lt;p&gt;My day job i use ssh… alot. When you manage hundreds of servers with mission critical infastructure running on passswordless login with ssh keys can be huge time saver. I also take security pretty seriously when it comes to store sensitive information and always looking to find better ways to store sensitive information securely and also in  a convenient way for it to be not cumbersome. 
With that thought combining ssh keys to encrypt/decrypt files made quite sense so here is a quick write up to do it for anyone else that are interested in it.&lt;/p&gt;

&lt;h5 id=&quot;create-or-open-a-file-that-you-would-like-to-encrypt&quot;&gt;1. Create or open a file that you would like to encrypt.&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~ echo &quot;my super secret information&quot; &amp;gt; secret.txt
➜  ~ cat secret.txt 
my super secret information
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;##### 2. If you havent already create a rsa key pair. If you would like to use existing rsa key pair skip this step and continue to step 3.
&lt;code class=&quot;highlighter-rouge&quot;&gt;
ssh-keygen
&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;export-your-generated-or-existing-public-key-to-pem-format&quot;&gt;3. Export your generated or existing public key to pem format.&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl rsa -in ~/.ssh/id_rsa -pubout &amp;gt; ~/id_rsa.pub.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;now-you-are-ready-encrypt-the-file-you-created-earliear&quot;&gt;4. Now you are ready encrypt the file you created earliear.&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat secret.txt  | openssl rsautl -encrypt -pubin -inkey ~/id_rsa.pub.pem &amp;gt; encrypted-secret.txt
cat encrypted-secret.txt 
????uG?????$?&amp;amp;?????VN?&#39;?(????,þQaE咫:?i??t?(?jr.g?#?ջO???=*?e??&amp;lt;&quot;?y&#39;% 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;to-decypt-the-secret&quot;&gt;5. To decypt the secret&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~ cat encrypted-secret.txt  | openssl rsautl -decrypt -inkey ~/.ssh/id_rsa
my super secret information
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
				<pubDate>Sun, 03 Dec 2017 17:13:00 -0500</pubDate>
				<link>/ssh,/encryption/2017/12/03/encrypting-files-rsa-key-pairs.html</link>
				<guid isPermaLink="true">/ssh,/encryption/2017/12/03/encrypting-files-rsa-key-pairs.html</guid>
			</item>
		
			<item>
				<title>Save screenshot to clipboard on OSX</title>
				<description>&lt;p&gt;Screenshots are saved as .png files on the desktop in Mac OS X v10.6 and later. They’re automatically named “Screen Shot date at time .png.” To save your screenshot to the Clipboard instead of a file on your desktop, use&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Command-Shift-Control-4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;.&lt;/p&gt;

</description>
				<pubDate>Sun, 10 Jul 2016 11:40:56 -0400</pubDate>
				<link>/osx,/screenshot/2016/07/10/save-screenshot-to-clipboard-on-osx.html</link>
				<guid isPermaLink="true">/osx,/screenshot/2016/07/10/save-screenshot-to-clipboard-on-osx.html</guid>
			</item>
		
			<item>
				<title>OpenVpn Setup with Docker</title>
				<description>&lt;p&gt;This is a basic summary of excellent tutorial from Digital Ocean on how to setup OpenVpn with Docker.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kylemanna/docker-openvpn&quot;&gt;https://github.com/kylemanna/docker-openvpn&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-run-openvpn-in-a-docker-container-on-ubuntu-14-04&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-run-openvpn-in-a-docker-container-on-ubuntu-14-04&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;create-an-fqdn&quot;&gt;1. Create an fqdn&lt;/h5&gt;

&lt;p&gt;I am using AWS Route53 for this step so when you login create an A record(assuming you are pointing to an ip.) for your vpn. Assuming your domain name is yourdomain.com, create something like vpn.yourdomain.com&lt;/p&gt;

&lt;h5 id=&quot;create-a-data-container&quot;&gt;2. Create a data container.&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export OVPN_DATA=&quot;ovpn-data&quot;&lt;/code&gt; &lt;br /&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -name $OVPN_DATA -v /etc/openvpn busybox&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;generate-vpn-config-file-based-on-fqdn&quot;&gt;3. Generate vpn config file based on fqdn.&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run --volumes-from $OVPN_DATA --rm kylemanna/openvpn ovpn_genconfig -u udp://vpn.yourdomain.com:1194&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;generate-ovpninitpki&quot;&gt;4. Generate ovpn_initpki&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run --volumes-from $OVPN_DATA --rm -it kylemanna/openvpn ovpn_initpki&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;run-the-server&quot;&gt;5. Run the server&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run --volumes-from $OVPN_DATA --rm -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;generate-client-keys&quot;&gt;6. Generate client keys&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run --volumes-from $OVPN_DATA rm -it  kylemanna/openvpn easyrsa build-client-full serkan nopass&lt;/code&gt; &lt;br /&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run --volumes-from $OVPN_DATA -rm kylemanna/openvpn ovpn_getclient serkan &amp;gt; serkan.ovpn&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;run-the-server-1&quot;&gt;7. Run the server&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d --volumes-from $OVPN_DATA -p 0.0.0.0:1194:1193/udp --cap-add=NET_ADMIN kylemanna/openvpn&lt;/code&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 09 Nov 2015 10:40:56 -0500</pubDate>
				<link>/vpn,/docker/2015/11/09/open-vpn-setup-with-docker.html</link>
				<guid isPermaLink="true">/vpn,/docker/2015/11/09/open-vpn-setup-with-docker.html</guid>
			</item>
		
			<item>
				<title>Bastion Host Setup for CoreOS</title>
				<description>&lt;p&gt;A common server access pattern is to prevent any connection to your production servers from outside of their private subnet, and use a bastion host to access the private subnet. This pattern is very
useful when you want to limit; for example ssh access, from only within the network.&lt;/p&gt;

&lt;p&gt;Typically you set up a bastion host, and execute a nc command to the destination host located within the private network.&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;#&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#~/.ssh/config
Host bastion-host
        Hostname 54.54.54.54
        User ec2-user
        RequestTTY yes
        ForwardAgent yes
        IdentityFile ~/.ssh/id_rsa

Host destination-host
        Hostname 10.0.1.141
        port 22
        User core
        ProxyCommand ssh -A bastion-host nc %h %p


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This works on most systems where netcat installed on both destination and bastion host.
Recently i have been working on a project to deploy a Mesosphere cluster with Cloudformation.
All the instances in the cluster were Coreos based so as usual i set up my config file with the bastion 
host pattern like above which suprisingly did not work. Turns out Coreos uses a newer implementation
of netcat which is called ncat. By modifying ProxyCommand lin on ~/.ssh/config file and change &lt;strong&gt;nc&lt;/strong&gt; to &lt;strong&gt;ncat&lt;/strong&gt;, i was able to 
ssh into hosts within private instances with ease.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#~/.ssh/config
Host bastion-host
        Hostname 54.54.54.54
        User ec2-user
        RequestTTY yes 
        ForwardAgent yes 
        IdentityFile ~/.ssh/id_rsa

Host destination-host
        Hostname 10.0.1.141
        port 22
        User core
        ProxyCommand ssh -A bastion-host ncat %h %p


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
				<pubDate>Sat, 07 Nov 2015 09:14:56 -0500</pubDate>
				<link>/coreos,ssh/2015/11/07/coreos-bastion-host-setup.html</link>
				<guid isPermaLink="true">/coreos,ssh/2015/11/07/coreos-bastion-host-setup.html</guid>
			</item>
		
			<item>
				<title>Quickstart with Vault</title>
				<description>&lt;p&gt;Vault is a secure storage server that secures, stores, passwords, tokens, API keys etc. It is the from Hashicorp which had some great products such as Vault, Terraform and i think the most popular of all Vagrant.
“Vault handles leasing, key revocation, key rolling, and auditing. I want to give a simple to follow setup example for anyone to try out this awesome tool.&lt;/p&gt;

&lt;h5 id=&quot;start-the-server&quot;&gt;1. Start the server&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; 
vault server -config&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vault.hcl &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#vault.hcl
backend &quot;file&quot; {
  path=&quot;vault&quot;
}

listener &quot;tcp&quot; {
  tls_disable = 1 
  address=&quot;127.0.0.1:8200&quot;
}

disable_mlock = true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;##### 2. Initiate vault and copy/save root token and the keys. &lt;em&gt;*This is only done when initating a new server.&lt;/em&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;
VAULT_ADDR=http://127.0.0.1:8200 vault init 
&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;authenticate-with-master-token&quot;&gt;3. Authenticate with master token.&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VAULT_ADDR=http://127.0.0.1:8200 vault auth &amp;lt;root-token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;unseal-to-add-new-authentication-tokens-default-threshold-is-set-to-3-only-root-token-can-unseal-the-vault-vault-is-sealed-everytime-it-is-restarted-and-has-to-be-unsealed-for-services-to-acces&quot;&gt;4. Unseal to add new authentication tokens. Default threshold is set to 3. Only root token can unseal the vault. Vault is sealed everytime it is restarted and has to be unsealed for services to acces&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VAULT_ADDR=http://127.0.0.1:8200 vault unseal  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;create-a-policy&quot;&gt;5. Create a policy.&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VAULT_ADDR=http://127.0.0.1:8200 vault policy-write secret acl.hcl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#acl.hcl
path &quot;secret/*&quot; {
  policy = &quot;read&quot;
}


path &quot;auth/token/lookup-self&quot; {
  policy = &quot;read&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;##### 6. Create a token that services will be using with the previously created policy. Token generated will be used for services so make a copy of it. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;
VAULT_ADDR=http://127.0.0.1:8200 vault token-create -policy=&quot;secret&quot;   
&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;while-still-in-root-and-add-new-keyvalues&quot;&gt;7. While still in root and add new key/values&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VAULT_ADDR=http://127.0.0.1:8200 vault write secret/AWS_SECRET_KEY value=&amp;lt;key goes here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;authenticate-with-service-token-that-was-generated-on-step-6-and-read-the-key-entered&quot;&gt;8. Authenticate with service token that was generated on step 6 and read the key entered.&lt;/h5&gt;

</description>
				<pubDate>Tue, 20 Oct 2015 11:40:56 -0400</pubDate>
				<link>/jekyll/2015/10/20/hashicorp-vault-setup.html</link>
				<guid isPermaLink="true">/jekyll/2015/10/20/hashicorp-vault-setup.html</guid>
			</item>
		
	</channel>
</rss>
